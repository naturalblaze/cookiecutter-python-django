[build-system]
requires = [
    "setuptools>=67.6.0",
    "wheel>=0.40.0"
]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.git_repo_name }}"
{%- if cookiecutter.package_manager == 'pip' %}
dynamic = ["readme", "dependencies"]
{%- elif cookiecutter.package_manager == 'uv' %}
dynamic = ["readme"]
{% endif -%}
version = "{{ cookiecutter.app_version }}"
requires-python = ">={{ cookiecutter.minimum_python_version }}"
description = "{{ cookiecutter.app_description }}"
keywords = [
]
authors = [
  { name="{{ cookiecutter.full_name }}", email="{{ cookiecutter.email }}" },
]
maintainers = [
  {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}"},
]
license = "MIT"
license-files = [
    "LICENSE"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: BSD",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    {% if cookiecutter.minimum_python_version == '3.9' %}"Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",{% endif -%}
    {% if cookiecutter.minimum_python_version == '3.10' %}"Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",{% endif -%}
    {% if cookiecutter.minimum_python_version == '3.11' %}"Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",{% endif -%}
    {% if cookiecutter.minimum_python_version == '3.12' %}"Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",{% endif -%}
    {% if cookiecutter.minimum_python_version == '3.13' %}"Programming Language :: Python :: 3.13",{% endif -%}

]

{% if cookiecutter.package_manager == 'uv' %}
dependencies = [
    "django",
    "django-extensions",
    {% if cookiecutter.use_django_markdownx == 'y' %}"django-markdownx",{% endif %}
    {% if cookiecutter.use_django_environ == 'y' %}"django-environ",{% endif %}
]

[dependency-groups]
dev = [
    "black",
    "tomli",
    "pytest-cov",
    "pytest-django",
    "sphinx",
    "pylint",
    "myst-parser",
    "sphinx_rtd_theme",
    "sphinxcontrib-mermaid",
    "httpx",
    "bandit",
    "ruff",
    "pytest-dotenv",
]
{% endif -%}

[project.urls]
Documentation = "https://{{ cookiecutter.git_repo_name }}.readthedocs.io/en/latest/"
Source = "{{ cookiecutter.git_url }}"
Tracker = "{{ cookiecutter.git_url }}/issues"

# Add your project folder and app folders
[tool.setuptools.packages.find]
include = [
    "<project-name>*",
    # "<app-name>*",
]

# Add or remove file extensions to include the data
[tool.setuptools.package-data]
"*" = ["*.txt", "*.rst"]

[tool.setuptools]
zip-safe = false

[tool.setuptools.dynamic]
readme = {file = "README.md", content-type = "text/markdown"}
{% if cookiecutter.package_manager == 'pip' %}
dependencies = {file = "requirements.txt"}
{% endif %}

[tool.pytest.ini_options]
env_files = [
    "tests/data/.test-env"
]
addopts = "--ds=<project-name>.settings --reuse-db --import-mode=importlib --strict-markers --cov-report term-missing"
markers = [
    "place_holder: marks tests as place_holder (deselect with -m 'not place_holder')",
]

[tool.coverage.run]
command_line= "-m pytest -vvv"

# Add your project folder and app folders
[tool.coverage.report]
include = [
    "<project-name>/*",
    # "<app-name>/*",
]
fail_under = 70

[tool.pylint]
max-line-length = 120
ignore-paths = [
    ".*migrations.*$",
]
# This allows pylint to complain on FIXME and XXX notes
notes = [
    "FIXME",
    "XXX",
]
fail-under = 9.9

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.bandit]
exclude_dirs = [
    "tests",
    "venv",
    ".venv",
    "docs",
    "scripts",
]

{%- if cookiecutter.package_manager == 'uv' %}
# UV settings reference https://docs.astral.sh/uv/reference/settings/
[tool.uv]
keyring-provider = "subprocess"
native-tls = true

{% endif -%}
